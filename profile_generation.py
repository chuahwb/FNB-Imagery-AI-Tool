{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import json\n",
        "import uuid # For generating unique IDs in placeholders\n",
        "\n",
        "# --- Configuration (for standalone execution) ---\n",
        "DEFAULT_NUM_PROFILES = 1 # Number of profiles to generate when run directly\n",
        "OUTPUT_FILENAME = \"simulated_profiles.json\" # Filename for standalone execution\n",
        "\n",
        "# --- Define Form Structure and Options ---\n",
        "# Based on dynamic_form_word_format_v1\n",
        "\n",
        "# Helper lists for conditions\n",
        "RESTAURANT_CAFE_TYPES = [\n",
        "    'Casual Dining Restaurant', 'Fine Dining Restaurant', 'Quick Service Restaurant (QSR) / Fast Food',\n",
        "    'Cafe / Coffee Shop / Kopitiam', 'Ghost Kitchen / Cloud Kitchen / Virtual Brand',\n",
        "    'Food Truck / Stall / Hawker Stall', 'Catering Service (Events, Corporate)' # Added Catering based on Q4a condition in source\n",
        "]\n",
        "BAKERY_TYPES = ['Bakery / Patisserie']\n",
        "FOOD_TRUCK_TYPES = ['Food Truck / Stall / Hawker Stall']\n",
        "CATERING_TYPES = ['Catering Service (Events, Corporate)']\n",
        "BAR_TYPES = ['Bar / Pub / Lounge']\n",
        "\n",
        "# Flattened options for easier sampling where applicable\n",
        "# (Keeping these definitions at module level for accessibility by functions)\n",
        "CUISINE_OPTIONS_FLAT = [\n",
        "    'Malay', 'Chinese Malaysian', 'Indian Malaysian (Mamak)', 'Nyonya/Peranakan', 'Borneo Native (Specify)', 'Other Malaysian Regional',\n",
        "    'Japanese', 'Korean', 'Thai', 'Vietnamese', 'Indonesian', 'Filipino', 'Chinese (Regional/General)', 'Indian (Regional/General)', 'Middle Eastern', 'Other Asian (Specify)',\n",
        "    'Italian', 'French', 'Spanish', 'American (General/Burgers/Steak)', 'British/Irish', 'Other European (Specify)',\n",
        "    'Mexican/Latin American', 'African (Specify Region)', 'Caribbean',\n",
        "    'Fusion', 'Gastropub', 'Seafood', 'Pizzeria', 'Sandwiches/Deli', 'Noodles/Rice Bowls', 'Tapas/Small Plates', 'Breakfast/Brunch Focus', 'Healthy/Salads', 'Plant-Based/Vegan', 'Vegetarian', 'Halal Certified/Muslim-Friendly', 'Gluten-Free Focus', 'Other'\n",
        "]\n",
        "SERVICE_OPTIONS_FLAT = [\n",
        "    'Dine-in (Reservations Recommended/Required)', 'Dine-in (Walk-ins Welcome)', 'Takeaway/Self-Pickup (\\'Tapau\\')', 'Curbside Pickup',\n",
        "    'In-House Delivery', 'Third-Party Delivery Platforms', 'Drive-Thru', 'Counter Service', 'Table Service', 'Online Ordering (via Website/App/Social Media)'\n",
        "]\n",
        "BAKERY_GOODS_FLAT = [\n",
        "    'Artisan Bread', 'Local Breads (e.g., Roti)', 'Pastries (Viennoiserie/Puffs)', 'Cakes (Custom/Celebration)', 'Local Kuih/Sweets',\n",
        "    'Cupcakes', 'Cookies/Biscuits', 'Desserts (Plated/Individual)', 'Savory Items (Pies, Quiches, Puffs)', 'Gluten-Free Options', 'Vegan Options', 'Coffee/Tea/Beverages', 'Other'\n",
        "]\n",
        "BAKERY_SELLING_FLAT = [\n",
        "    'Retail Storefront', 'Online Orders (Local Delivery)', 'Online Orders (Domestic/International Shipping)', 'Wholesale (to other businesses)', 'Markets/Pop-ups (Pasar Malam/Pagi)', 'Catering/Events'\n",
        "]\n",
        "FOOD_TRUCK_LOCATIONS_FLAT = [\n",
        "    'Fixed Hawker Centre Stall', 'Roadside Stall (Regular Location)', 'Mobile Truck (Rotating Locations)', 'Office Parks/Commercial Areas', 'Events/Festivals/Carnivals', 'Markets (Pasar Malam/Pagi)', 'Private Catering/Functions'\n",
        "]\n",
        "CATERING_EVENTS_FLAT = [\n",
        "    'Corporate Events/Meetings', 'Weddings/Engagements', 'Private Parties (Birthdays, Anniversaries)', 'Religious/Cultural Functions', 'Social Gatherings', 'Festivals/Public Events', 'Institutional (Schools, Hospitals)', 'Drop-off Catering/Packed Meals', 'Full-Service Catering'\n",
        "]\n",
        "BAR_OFFERINGS_FLAT = [\n",
        "    'Beer Selection (Local/Import/Craft)', 'Wine List', 'Signature/Craft Cocktails', 'Spirits Selection (Whiskey, Gin etc.)', 'Non-Alcoholic Specialties/Mocktails',\n",
        "    'Bar Snacks/Small Plates (\\'Cicchetti\\')', 'Full Food Menu', 'Live Music/Bands/DJs', 'Sports Screening', 'Games (Pool, Darts)', 'Quiz Nights/Events', 'Specific Theme/Atmosphere', 'Other'\n",
        "]\n",
        "AUDIENCE_OPTIONS_FLAT = [\n",
        "    'Families with Children', 'Young Adults (18-30)', 'Professionals/Office Workers (30-55)', 'Seniors (55+)', 'Students (University/College)',\n",
        "    'Tourists/Visitors (International/Domestic)', 'Local Residents/Community', 'Budget-Conscious Consumers', 'Affluent Consumers', 'Health-Conscious/Wellness Focused',\n",
        "    'Eco-Conscious Consumers', 'Foodies/Adventurous Eaters', 'Expatriates', 'Specific Dietary Needs (Vegan, GF, Halal, etc.)', 'Business/Corporate Clients', 'Event Planners', 'Other'\n",
        "]\n",
        "MARKETING_GOALS_FLAT = [\n",
        "    'Increase Social Media Likes/Follows/Shares', 'Encourage User-Generated Content/Reviews', 'Build Online Community/Group',\n",
        "    'Drive Foot Traffic/Reservations', 'Increase Online Orders/Delivery', 'Promote Specific Menu Items/Products', 'Boost Sales During Off-Peak Hours/Specific Days',\n",
        "    'Build General Brand Awareness', 'Launch New Location/Product/Menu', 'Announce Events/Promotions/Offers', 'Highlight Unique Selling Points',\n",
        "    'Promote Loyalty Program/Membership', 'Attract Repeat Customers', 'Share updates via WhatsApp Business / Social Media Stories', 'Other'\n",
        "]\n",
        "PRIMARY_STYLE_OPTIONS_FLAT = [\n",
        "    'Modern/Contemporary', 'Rustic/Natural', 'Vintage/Retro', 'Minimalist/Clean', 'Cozy/Comfortable (\\'LePak\\')', 'Elegant/Sophisticated',\n",
        "    'Casual/Relaxed', 'Playful/Quirky', 'Industrial', 'Luxe/Opulent', 'Tropical', 'Heritage/Traditional',\n",
        "    'Vibrant/Bold/Energetic', 'Muted/Subtle/Calm', 'Dark/Moody', 'Light/Airy', 'Classic', 'Whimsical/Creative', 'Nostalgic', 'Other'\n",
        "]\n",
        "SECONDARY_STYLE_OPTIONS_FLAT = PRIMARY_STYLE_OPTIONS_FLAT + [ # Include primary options plus extras\n",
        "    'Instagrammable/Photo-worthy', 'Family-Friendly', 'Romantic', 'Tech-Integrated', 'Community-Focused', 'Sustainable/Eco-Friendly', 'Artsy/Cultural', 'Wabi-Sabi (Imperfect Beauty)'\n",
        "]\n",
        "IMAGERY_NEEDS_FLAT = [\n",
        "    'High-Quality Dish Photography (Styled)', 'Close-up/Detail Shots (\\'Food Porn\\')', 'Menu Item Features', 'Beverage Photography', 'Ingredient Shots/Preparation Process',\n",
        "    'Interior/Ambiance Photos (Day/Night)', 'Exterior/Facade Photos', 'Lifestyle Shots', 'Behind-the-Scenes/Staff/Chef Action Shots',\n",
        "    'Images for Social Media Posts', 'Website Banners/Heroes', 'Email Marketing Visuals', 'Online Ad Creatives', 'Print Menu Design Elements', 'Event Promotion Visuals', 'User-Generated Content Campaign Starters'\n",
        "]\n",
        "\n",
        "\n",
        "FORM_STRUCTURE = [\n",
        "    # --- Step 1 ---\n",
        "    {\"id\": \"q1\", \"type\": \"dropdown\", \"options\": [\n",
        "        'Cafe / Coffee Shop / Kopitiam', 'Casual Dining Restaurant', 'Fine Dining Restaurant', 'Quick Service Restaurant (QSR) / Fast Food',\n",
        "        'Bakery / Patisserie', 'Food Truck / Stall / Hawker Stall', 'Catering Service (Events, Corporate)', 'Bar / Pub / Lounge',\n",
        "        'Ghost Kitchen / Cloud Kitchen / Virtual Brand', 'Specialty Food Shop (e.g., Grocer, Butcher, Deli)', 'Meal Kit / Subscription Box Service',\n",
        "        'Beverage Producer / Shop (e.g., Juice Bar, Bubble Tea, Brewery)', 'Other'], \"condition\": None},\n",
        "    {\"id\": \"q1a\", \"type\": \"text\", \"options\": None, \"condition\": ('q1', '==', 'Other')},\n",
        "    {\"id\": \"q2\", \"type\": \"radio\", \"options\": [\n",
        "        'Micro (1-5 employees / Single Owner-Operator)', 'Small (6-20 employees / Single Location)',\n",
        "        'Medium (21-100 employees / Few Locations)', 'Large (101+ employees / Multi-location / Chain)'], \"condition\": None},\n",
        "    {\"id\": \"q3\", \"type\": \"text\", \"options\": None, \"condition\": None},\n",
        "\n",
        "    # --- Step 2 ---\n",
        "    {\"id\": \"q4a\", \"type\": \"checkbox\", \"options\": CUISINE_OPTIONS_FLAT, \"max_select\": 5, \"condition\": ('q1', 'in', RESTAURANT_CAFE_TYPES)},\n",
        "    {\"id\": \"q4b\", \"type\": \"checkbox\", \"options\": SERVICE_OPTIONS_FLAT, \"max_select\": 4, \"condition\": ('q1', 'in', RESTAURANT_CAFE_TYPES)}, # Adjusted condition slightly\n",
        "    {\"id\": \"q4c\", \"type\": \"checkbox\", \"options\": BAKERY_GOODS_FLAT, \"max_select\": 5, \"condition\": ('q1', 'in', BAKERY_TYPES)},\n",
        "    {\"id\": \"q4d\", \"type\": \"checkbox\", \"options\": BAKERY_SELLING_FLAT, \"max_select\": 3, \"condition\": ('q1', 'in', BAKERY_TYPES)},\n",
        "    {\"id\": \"q4e\", \"type\": \"checkbox\", \"options\": FOOD_TRUCK_LOCATIONS_FLAT, \"max_select\": 3, \"condition\": ('q1', 'in', FOOD_TRUCK_TYPES)},\n",
        "    {\"id\": \"q4f\", \"type\": \"checkbox\", \"options\": CATERING_EVENTS_FLAT, \"max_select\": 4, \"condition\": ('q1', 'in', CATERING_TYPES)},\n",
        "    {\"id\": \"q4g\", \"type\": \"checkbox\", \"options\": BAR_OFFERINGS_FLAT, \"max_select\": 5, \"condition\": ('q1', 'in', BAR_TYPES)},\n",
        "    {\"id\": \"q5\", \"type\": \"checkbox\", \"options\": AUDIENCE_OPTIONS_FLAT, \"max_select\": 4, \"condition\": None}, # Limit 1-4 as per form text\n",
        "    {\"id\": \"q6\", \"type\": \"checkbox\", \"options\": MARKETING_GOALS_FLAT, \"max_select\": 5, \"condition\": None},\n",
        "\n",
        "    # --- Step 3 ---\n",
        "    {\"id\": \"q7\", \"type\": \"file_upload\", \"options\": None, \"condition\": None},\n",
        "    {\"id\": \"q8\", \"type\": \"color_picker\", \"options\": None, \"num_colors\": (2, 4), \"condition\": None}, # Simulate 2-4 colors\n",
        "    {\"id\": \"q9\", \"type\": \"radio\", \"options\": PRIMARY_STYLE_OPTIONS_FLAT, \"condition\": None},\n",
        "    {\"id\": \"q9a\", \"type\": \"checkbox\", \"options\": SECONDARY_STYLE_OPTIONS_FLAT, \"max_select\": 3, \"condition\": None}, # Optional, so might be empty\n",
        "\n",
        "    # --- Step 4 (Optional - simulate lower chance of filling these) ---\n",
        "    {\"id\": \"q10\", \"type\": \"checkbox\", \"options\": IMAGERY_NEEDS_FLAT, \"max_select\": 5, \"condition\": None, \"optional_chance\": 0.7},\n",
        "    {\"id\": \"q11\", \"type\": \"file_upload\", \"options\": None, \"condition\": None, \"optional_chance\": 0.3},\n",
        "    {\"id\": \"q12\", \"type\": \"file_upload\", \"options\": None, \"condition\": None, \"optional_chance\": 0.2},\n",
        "    {\"id\": \"q13\", \"type\": \"text_area\", \"options\": None, \"condition\": None, \"optional_chance\": 0.5},\n",
        "]\n",
        "\n",
        "# --- Helper Functions (Module Level) ---\n",
        "\n",
        "def evaluate_condition(condition, current_response):\n",
        "    \"\"\"Checks if a question's condition is met based on previous answers.\"\"\"\n",
        "    if condition is None:\n",
        "        return True\n",
        "\n",
        "    q_id, operator, value = condition\n",
        "    # Ensure the prerequisite answer exists before trying to evaluate\n",
        "    if q_id not in current_response or current_response[q_id] is None:\n",
        "        return False # Can't evaluate if the prerequisite question wasn't answered or applicable\n",
        "\n",
        "    response_value = current_response[q_id]\n",
        "\n",
        "    try:\n",
        "        if operator == '==':\n",
        "            return response_value == value\n",
        "        elif operator == '!=':\n",
        "            return response_value != value\n",
        "        elif operator == 'in':\n",
        "            # Ensure value is iterable (list, tuple, set) for 'in' operator\n",
        "            if not isinstance(value, (list, tuple, set)):\n",
        "                 print(f\"Warning: 'in' operator expects an iterable value for condition: {condition}\")\n",
        "                 return False\n",
        "            return response_value in value\n",
        "        elif operator == 'not in':\n",
        "             # Ensure value is iterable (list, tuple, set) for 'not in' operator\n",
        "            if not isinstance(value, (list, tuple, set)):\n",
        "                 print(f\"Warning: 'not in' operator expects an iterable value for condition: {condition}\")\n",
        "                 return False\n",
        "            return response_value not in value\n",
        "        else:\n",
        "            print(f\"Warning: Unknown operator '{operator}' in condition: {condition}\")\n",
        "            return False\n",
        "    except Exception as e:\n",
        "        print(f\"Error evaluating condition {condition} with response '{response_value}': {e}\")\n",
        "        return False\n",
        "\n",
        "\n",
        "def simulate_text_input(question_id):\n",
        "    \"\"\"Generates placeholder text.\"\"\"\n",
        "    if question_id == 'q1a':\n",
        "        return f\"Other Business Type - {random.choice(['Events Space', 'Cookery School', 'Food Consultancy'])}\"\n",
        "    elif question_id == 'q3':\n",
        "        # Simple Malaysian-like location simulation\n",
        "        state = random.choice(['Selangor', 'Kuala Lumpur', 'Penang', 'Johor', 'Sabah', 'Sarawak', 'Melaka', 'Perak'])\n",
        "        city = random.choice(['Petaling Jaya', 'George Town', 'Johor Bahru', 'Kota Kinabalu', 'Kuching', 'Subang Jaya', 'Ipoh', 'Shah Alam', 'Melaka City'])\n",
        "        return f\"{city}, {state}, Malaysia\"\n",
        "    # General handler for 'Other' specification text fields based on convention qXa\n",
        "    elif question_id.endswith('a') and len(question_id) == 3: # Catches q1a, q9a (though q9a is checkbox) - refine if needed\n",
        "         return f\"Other specified - {random.choice(['Details A', 'Details B', 'Details C'])}\"\n",
        "    else: # Default placeholder for any other text field\n",
        "        return f\"Simulated Text {uuid.uuid4().hex[:6]}\"\n",
        "\n",
        "def simulate_text_area(question_id):\n",
        "     \"\"\"Generates longer placeholder text.\"\"\"\n",
        "     phrases = [\n",
        "         \"Focus on natural lighting.\", \"Highlight local ingredients.\", \"Must show Halal logo clearly.\",\n",
        "         \"Avoid overly cluttered images.\", \"Prefer candid shots of customers.\", \"Showcase our unique packaging.\",\n",
        "         \"Emphasize vibrant colors.\", \"Needs images suitable for Instagram Reels.\", \"No photos of alcohol.\"\n",
        "     ]\n",
        "     # Add some chance of being empty even if selected\n",
        "     if random.random() < 0.1:\n",
        "         return \"\"\n",
        "     return random.choice(phrases) + f\" (Simulated {uuid.uuid4().hex[:4]})\"\n",
        "\n",
        "\n",
        "def simulate_file_upload(question_id):\n",
        "    \"\"\"Generates placeholder filename.\"\"\"\n",
        "    prefix = \"logo\" if question_id == \"q7\" else \"image_example\"\n",
        "    return f\"{prefix}_sim_{uuid.uuid4().hex[:8]}.{random.choice(['png', 'jpg', 'svg'])}\"\n",
        "\n",
        "def simulate_color_picker(num_range):\n",
        "    \"\"\"Generates list of random hex color codes.\"\"\"\n",
        "    num_colors = random.randint(num_range[0], num_range[1])\n",
        "    colors = []\n",
        "    for _ in range(num_colors):\n",
        "        colors.append(f\"#{random.randint(0, 0xFFFFFF):06x}\")\n",
        "    return colors\n",
        "\n",
        "# --- Core Simulation Function (Module Level) ---\n",
        "\n",
        "def generate_profile(structure):\n",
        "    \"\"\"Generates a single simulated profile based on the form structure.\"\"\"\n",
        "    profile_data = {}\n",
        "    answered_other = {} # Track if 'Other' was selected for fields needing text specification\n",
        "\n",
        "    for question in structure:\n",
        "        q_id = question[\"id\"]\n",
        "        condition = question.get(\"condition\", None)\n",
        "        q_type = question[\"type\"]\n",
        "        options = question.get(\"options\", [])\n",
        "        optional_chance = question.get(\"optional_chance\", 1.0) # Default to 100% chance unless specified\n",
        "\n",
        "        # Check condition first - if condition not met, mark as None and skip simulation\n",
        "        if not evaluate_condition(condition, profile_data):\n",
        "            profile_data[q_id] = None # Mark as not applicable / not shown\n",
        "            continue\n",
        "\n",
        "        # Decide if optional question should be answered based on chance\n",
        "        if optional_chance < 1.0 and random.random() > optional_chance:\n",
        "             profile_data[q_id] = None # Explicitly mark as skipped optional question\n",
        "             continue\n",
        "\n",
        "        # --- Simulate answer only if condition met and optional chance passed ---\n",
        "        answer = None\n",
        "        try:\n",
        "            if q_type == \"dropdown\" or q_type == \"radio\":\n",
        "                if options:\n",
        "                    answer = random.choice(options)\n",
        "                    if answer == 'Other':\n",
        "                       answered_other[q_id] = True # Flag that 'Other' was chosen\n",
        "                else:\n",
        "                     print(f\"Warning: No options defined for {q_id}\")\n",
        "                     answer = \"Error: No Options\"\n",
        "\n",
        "            elif q_type == \"checkbox\":\n",
        "                if options:\n",
        "                    max_s = question.get(\"max_select\", len(options))\n",
        "                    # Ensure k is at least 1 if options exist, unless max_select is 0 (edge case)\n",
        "                    min_k = 1 if len(options) > 0 and max_s > 0 else 0\n",
        "                    # Ensure k is not more than available options or max_select\n",
        "                    upper_bound = min(max_s, len(options))\n",
        "                    if min_k > upper_bound: # Handle cases like max_select=0 or no options\n",
        "                        k = 0\n",
        "                    else:\n",
        "                        k = random.randint(min_k, upper_bound)\n",
        "\n",
        "                    if k > 0:\n",
        "                        answer = random.sample(options, k)\n",
        "                        if 'Other' in answer:\n",
        "                            answered_other[q_id] = True # Flag that 'Other' was chosen\n",
        "                    else:\n",
        "                        answer = [] # Empty list if k is 0\n",
        "                else:\n",
        "                     print(f\"Warning: No options defined for {q_id}\")\n",
        "                     answer = []\n",
        "\n",
        "            elif q_type == \"text\":\n",
        "                # Check if this text field is for specifying an 'Other' choice made previously\n",
        "                is_other_specifier = False\n",
        "                if condition and condition[1] == '==': # Simple check for 'Other' conditions like ('q1', '==', 'Other')\n",
        "                     prereq_id = condition[0]\n",
        "                     # Check if the prerequisite question's answer *was* 'Other'\n",
        "                     if prereq_id in profile_data and profile_data[prereq_id] == 'Other':\n",
        "                         is_other_specifier = True\n",
        "                 # This logic might need refinement if 'Other' can be selected in checkboxes and trigger text\n",
        "\n",
        "                answer = simulate_text_input(q_id) # Generate text regardless for simplicity now\n",
        "\n",
        "            elif q_type == \"text_area\":\n",
        "                 answer = simulate_text_area(q_id)\n",
        "            elif q_type == \"file_upload\":\n",
        "                answer = simulate_file_upload(q_id)\n",
        "            elif q_type == \"color_picker\":\n",
        "                num_range = question.get(\"num_colors\", (1, 1))\n",
        "                answer = simulate_color_picker(num_range)\n",
        "            else:\n",
        "                print(f\"Warning: Unknown question type '{q_type}' for {q_id}\")\n",
        "                answer = \"Error: Unknown Type\"\n",
        "\n",
        "        except Exception as e:\n",
        "             print(f\"Error simulating answer for {q_id} (Type: {q_type}): {e}\")\n",
        "             answer = \"Error: Simulation Failed\"\n",
        "\n",
        "        profile_data[q_id] = answer\n",
        "\n",
        "    # Return the raw profile data including None values\n",
        "    return profile_data\n",
        "\n",
        "\n",
        "# --- NEW Reusable Function ---\n",
        "def generate_simulation_dataset(n):\n",
        "    \"\"\"\n",
        "    Generates a dataset of n simulated F&B profiles based on FORM_STRUCTURE.\n",
        "\n",
        "    Args:\n",
        "        n (int): The number of profiles to generate.\n",
        "\n",
        "    Returns:\n",
        "        list: A list of dictionaries, where each dictionary represents a simulated profile.\n",
        "              Returns an empty list if n is less than 1.\n",
        "    \"\"\"\n",
        "    if n < 1:\n",
        "        print(\"Warning: Number of profiles requested (n) must be 1 or greater.\")\n",
        "        return []\n",
        "\n",
        "    print(f\"Generating {n} simulated profiles...\")\n",
        "    dataset = []\n",
        "    # Loop to generate n profiles\n",
        "    for i in range(n):\n",
        "        profile = generate_profile(FORM_STRUCTURE) # Assumes FORM_STRUCTURE is accessible\n",
        "        dataset.append(profile)\n",
        "        # Print progress indicator every 10 profiles or if n is small\n",
        "        if (i + 1) % 10 == 0 or n <= 10:\n",
        "             print(f\"Generated {i + 1}/{n} profiles...\")\n",
        "    print(f\"\\nFinished generating {len(dataset)} profiles.\")\n",
        "    return dataset\n",
        "\n",
        "# --- Main Execution Block (for running the script directly) ---\n",
        "if __name__ == \"__main__\":\n",
        "    # Generate the dataset using the function\n",
        "    simulated_data = generate_simulation_dataset(DEFAULT_NUM_PROFILES)\n",
        "    print(f\"{simulated_data}\")\n",
        "\n",
        "    # Optional: Print the first generated profile for inspection\n",
        "    # if simulated_data:\n",
        "    #     print(\"\\nFirst generated profile:\")\n",
        "    #     print(json.dumps(simulated_data[0], indent=4, ensure_ascii=False))\n",
        "\n",
        "    # Export to JSON\n",
        "    if simulated_data: # Only save if data was generated\n",
        "        try:\n",
        "            with open(OUTPUT_FILENAME, 'w', encoding='utf-8') as f:\n",
        "                json.dump(simulated_data, f, indent=4, ensure_ascii=False)\n",
        "            print(f\"\\nSuccessfully saved dataset to {OUTPUT_FILENAME}\")\n",
        "        except IOError as e:\n",
        "            print(f\"\\nError saving dataset to {OUTPUT_FILENAME}: {e}\")\n",
        "        except TypeError as e:\n",
        "             print(f\"\\nError during JSON serialization: {e}\")\n",
        "             # Optionally print the first problematic profile to help debug serialization issues\n",
        "             # print(\"First profile data:\", simulated_data[0])\n",
        "    else:\n",
        "        print(\"\\nNo data generated, skipping file save.\")"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "id": "q4viJGxIGfJp"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}